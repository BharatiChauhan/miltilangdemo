
name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: root
        ports:
          - 5432/tcp
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5


    steps:
     - uses: actions/checkout@v3
     - name: Set up JDK 17
       uses: actions/setup-java@v3
       with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
     - name: Build with Maven
       run: mvn clean install

     - name: Test postgres database
       run: go test -v ./...
       working-directory: C:\Program Files\PostgreSQL\15
       env:
        # use postgres for the host here because we have specified a contaienr for the job.
        # If we were running the job on the VM this would be localhost
        PG_HOST: localhost
        PG_USER: postgres
        PG_DATABASE: mydb
        PG_PASSWORD: root
        PG_PORT: ${{ job.services.postgres.ports['5432'] }}


     - name: Build & push Docker image
       uses: mr-smithers-excellent/docker-build-push@v6
       with:
          image: bharati03/github-action
          tags: latest
          registry: docker.io
          dockerfile: Dockerfile
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}


    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
     - name: Update dependency graph
       uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
